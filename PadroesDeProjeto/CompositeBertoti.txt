Sure! Here's an example UML diagram for the Composite pattern, followed by the Java code:

lua
Copy code
                    +-------------+
                    |   Component |
                    +-------------+
                    | +operation()|
                    +-------------+
                           /\
                            |
             +--------------+-------------+
             |                            |
    +--------------+            +--------------+
    |   Leaf       |            |   Composite  |
    +--------------+            +--------------+
    |              |            |              |
    +--------------+            +--------------+
                                  | +add()      |
                                  | +remove()   |
                                  | +getChild() |
                                  +-------------+
The Component class defines the interface for all objects in the composite structure. It includes an operation() method that must be implemented by both the Leaf and Composite classes.

The Leaf class represents the leaf nodes in the composite structure. These are the objects that do not have any children. They implement the operation() method to perform their specific task.

The Composite class represents the composite nodes in the structure. These are the objects that have one or more child nodes. They implement the operation() method by recursively calling the operation() method of their child nodes. They also provide methods to add and remove child nodes, and to retrieve a specific child node.

Here's the corresponding Java code:

java
Copy code
import java.util.ArrayList;
import java.util.List;

interface Component {
    void operation();
}

class Leaf implements Component {
    @Override
    public void operation() {
        System.out.println("Leaf operation.");
    }
}

class Composite implements Component {
    private List<Component> children = new ArrayList<>();

    public void add(Component component) {
        children.add(component);
    }

    public void remove(Component component) {
        children.remove(component);
    }

    public Component getChild(int index) {
        return children.get(index);
    }

    @Override
    public void operation() {
        System.out.println("Composite operation.");
        for (Component component : children) {
            component.operation();
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Component leaf = new Leaf();

        Component composite1 = new Composite();
        composite1.add(leaf);

        Component composite2 = new Composite();
        composite2.add(composite1);

        composite2.operation();
    }
}
In this program, we define two classes: Leaf and Composite. The Leaf class represents the leaf nodes in the composite structure, and the Composite class represents the composite nodes.

The Composite class has a List of Component objects, which can be either Leaf or Composite objects. It provides methods to add and remove child components, and to retrieve a specific child component.

The operation() method of the Composite class recursively calls the operation() method of each child component, while the operation() method of the Leaf class performs its specific operation.

In the Main class, we create a Leaf object and two Composite objects. We add the Leaf object to the first Composite object, and the first Composite object to the second Composite object. We then call the operation() method of the second Composite object, which recursively calls the operation() method of the first Composite object and the Leaf object, resulting in the following output:

Copy code
Composite operation.
Composite operation.
Leaf operation.
This program demonstrates how the Composite pattern can be used to represent a hierarchical structure of objects, where the objects can be treated uniformly as components.